#!/bin/bash

# ----- bash shell execution can mess with ur head when it comes
# ----- environment (relative directory stuff)
# ----- do files work from where you call the script? or the scrips location?



# ----- copy microsoft .doc to local, coz script does not work relatively

fileDate=`date +"%d-%m-%Y"`
article_mHeader=`date +"%B-%Y"`
directory_name="../../blogposts/"$article_mHeader # Eg: January-2020
s_hour=`date +'%I'`; s_minute=`date +'%M'`; s_meridiem=`date +'%p'`
# ********** We need different var naming strategy for directory, IF  **********


cp -v ../../writing_space/word.doc .
echo 'java -jar ../javaWordToHtml/wordToHtml.jar ../../writing_space/word.doc'
sleep 1

java -jar ../javaWordToHtml/wordToHtml.jar word.doc
# ----- cleanup of local copy
rm -v word.doc





echo

mv html/word.html html/$fileDate.html
if [ -d $directory_name ]
then
    mv html/$fileDate.html $directory_name/.
else
    read -n 1 -p "Create new directory(Y/n)? <>" blogInput
    if [ "$blogInput" = "n" ]
    then
        echo "exiting"
        exit
    fi
    echo $0
    mkdir $directory_name
    mv html/$fileDate.html $directory_name/.
fi
# ----- cleanup of local html/
rmdir html

sed -n '/\.s1/p' $directory_name/$fileDate.html >> ../../_temp/temp-styles.css
sed -n '/\.p1/p' $directory_name/$fileDate.html >> ../../_temp/temp-styles.css

sed -i 's/class="p1"/ccllaass#"p1"/g' $directory_name/$fileDate.html # negate patterns out of attribute removal later
sed -i 's/class="s1"/ccllaass#"s1"/g' $directory_name/$fileDate.html # negate patterns out of attribute removal later

# ---------- so many options possible to extract body content including long winding and confusing python ----------
# ---------- scripts calling scripts, installing libs, path issues, NO THANKS ----------

cat $directory_name/$fileDate.html | tr -d '\n' > $directory_name/$fileDate.html_TEMP

# ---------- so many options possible to extract body content including long winding and confusing python ----------


# ---------- body content
awk 'BEGIN{FS="<body"}{print "<body"$2}' $directory_name/$fileDate.html_TEMP | awk 'BEGIN{FS="</body"}{print $1"</body>"}' > $directory_name/$fileDate.html

# ---------- extract title for later
awk 'BEGIN{FS="\"s1\">"}{print $2}' $directory_name/$fileDate.html_TEMP | awk 'BEGIN{FS="</span"}{print $1}' > ../../_temp/tmp.txt
articleTitle=`cat ../../_temp/tmp.txt`



# ---------- Wow!! This was quite brilliant on my part!! removing html attributes by first splitting content into many lines, behaving like a parser I guess
sed  's/ class/\n/g' $directory_name/$fileDate.html | sed 's/">/"\n>/g' > $directory_name/$fileDate.html_TEMP
sed -i '/=/d' $directory_name/$fileDate.html_TEMP
cat $directory_name/$fileDate.html_TEMP | tr -d '\n' > $directory_name/$fileDate.html

rm $directory_name/$fileDate.html_TEMP

sed -i 's/ccllaass#"p1"/class="p1"/g' $directory_name/$fileDate.html # reverse pattern removal
sed -i 's/ccllaass#"s1"/class="s1"/g' $directory_name/$fileDate.html # reverse pattern removal

# echo > ../../_temp/temp-styles.css


# dont forget 'Posted at 10:30 PM'



# ------ more fixes required:
# ---------- retain style for s1 & p1, concatenate to temporary css file
# ---------- retain class s1 & p1

# ---------- time should show like this: date +'%I:%M %p'




# editPost is just sequential add, no need for search, just check (if) month heading exists

awk '/'$article_mHeader'/{print $0}' ../../blogposts/index.html > ../../_temp/diredname.txt
check_mH=`cat ../../_temp/diredname.txt`
if [[ $check_mH == '' ]]; then # another bashism, very weird, its becoz the symbol [[ itself is an 'if' operator
     echo '<h1>'$article_mHeader'</h1>' > ../../blogposts/index.html
fi

echo '<a href="'$fileDate'.html" id="'$fileDate'_'$s_hour'-'$s_minute$s_meridiem'">'\
     $articleTitle\
     '</a>' >> ../../blogposts/index.html



# ---------- cleanup
rm -v ../../writing_space/*
rm -v ../../_temp/*

